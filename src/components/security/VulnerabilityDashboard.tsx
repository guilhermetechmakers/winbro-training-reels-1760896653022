/**
 * Vulnerability Dashboard Component
 * Displays vulnerability scanning results and security metrics
 */

import React, { useState, useEffect } from 'react';
import { motion } from 'motion/react';
import { 
  Shield, 
  AlertTriangle, 
  CheckCircle, 
  XCircle, 
  Search,
  Filter,
  Play,
  Clock,
  Key,
  RotateCcw,
  Plus,
  Settings
} from 'lucide-react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Label } from '@/components/ui/label';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Progress } from '@/components/ui/progress';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
// import { Alert, AlertDescription } from '@/components/ui/alert';
import { vulnerabilityService } from '@/services/vulnerabilityService';
import type { VulnerabilityMetrics, SecurityScanResult, VulnerabilityReport, SecretInfo } from '@/services/vulnerabilityService';

interface VulnerabilityDashboardProps {
  className?: string;
}

export const VulnerabilityDashboard: React.FC<VulnerabilityDashboardProps> = ({ className }) => {
  const [metrics, setMetrics] = useState<VulnerabilityMetrics | null>(null);
  const [scans, setScans] = useState<SecurityScanResult[]>([]);
  const [vulnerabilities] = useState<VulnerabilityReport[]>([]);
  const [secrets, setSecrets] = useState<SecretInfo[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  // const [selectedScan] = useState<string | null>(null);
  const [filterSeverity, setFilterSeverity] = useState<string>('all');
  const [filterStatus, setFilterStatus] = useState<string>('all');
  const [activeTab, setActiveTab] = useState('overview');

  useEffect(() => {
    loadDashboardData();
  }, []);

  const loadDashboardData = async () => {
    try {
      setLoading(true);
      const [metricsData, scansData, secretsData] = await Promise.all([
        vulnerabilityService.getVulnerabilityMetrics(),
        vulnerabilityService.getRecentScans(10),
        vulnerabilityService.getSecrets()
      ]);

      setMetrics(metricsData);
      setScans(scansData);
      setSecrets(secretsData);
    } catch (err) {
      setError('Failed to load vulnerability dashboard data');
      console.error('Vulnerability dashboard error:', err);
    } finally {
      setLoading(false);
    }
  };

  const startScan = async (scanType: SecurityScanResult['scanType']) => {
    try {
      await vulnerabilityService.startScan(scanType, 'codebase');
      await loadDashboardData();
    } catch (err) {
      setError('Failed to start security scan');
      console.error('Start scan error:', err);
    }
  };

  const loadVulnerabilities = async () => {
    try {
      // const vulns = await vulnerabilityService.getVulnerabilitiesByScan(scanId);
      // setVulnerabilities(vulns);
      // setSelectedScan(scanId);
    } catch (err) {
      setError('Failed to load vulnerabilities');
      console.error('Load vulnerabilities error:', err);
    }
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'destructive';
      case 'high': return 'destructive';
      case 'medium': return 'default';
      case 'low': return 'secondary';
      default: return 'secondary';
    }
  };

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case 'critical': return <XCircle className="h-4 w-4" />;
      case 'high': return <AlertTriangle className="h-4 w-4" />;
      case 'medium': return <AlertTriangle className="h-4 w-4" />;
      case 'low': return <CheckCircle className="h-4 w-4" />;
      default: return <Shield className="h-4 w-4" />;
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'open': return 'destructive';
      case 'in_progress': return 'default';
      case 'resolved': return 'secondary';
      case 'false_positive': return 'outline';
      case 'accepted_risk': return 'outline';
      default: return 'secondary';
    }
  };

  const filteredVulnerabilities = vulnerabilities.filter(vuln => {
    if (filterSeverity !== 'all' && vuln.severity !== filterSeverity) return false;
    if (filterStatus !== 'all' && vuln.status !== filterStatus) return false;
    return true;
  });

  if (loading) {
    return (
      <div className={`space-y-6 ${className}`}>
        <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
          {[...Array(4)].map((_, i) => (
            <Card key={i} className="animate-pulse">
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <div className="h-4 w-24 bg-gray-200 rounded" />
                <div className="h-4 w-4 bg-gray-200 rounded" />
              </CardHeader>
              <CardContent>
                <div className="h-8 w-16 bg-gray-200 rounded mb-2" />
                <div className="h-3 w-32 bg-gray-200 rounded" />
              </CardContent>
            </Card>
          ))}
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <Card className={className}>
        <CardContent className="flex items-center justify-center h-32">
          <div className="text-center">
            <XCircle className="h-8 w-8 text-red-500 mx-auto mb-2" />
            <p className="text-red-600">{error}</p>
            <Button onClick={loadDashboardData} className="mt-2">
              Retry
            </Button>
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className={`space-y-6 ${className}`}>
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">Vulnerability Dashboard</h1>
          <p className="text-muted-foreground">
            Monitor security vulnerabilities, scans, and secrets management
          </p>
        </div>
        <div className="flex items-center space-x-2">
          <Button onClick={() => startScan('dependency')} variant="outline" size="sm">
            <Play className="h-4 w-4 mr-2" />
            Scan Dependencies
          </Button>
          <Button onClick={() => startScan('secrets')} variant="outline" size="sm">
            <Search className="h-4 w-4 mr-2" />
            Scan Secrets
          </Button>
          <Button onClick={loadDashboardData} variant="outline" size="sm">
            <RotateCcw className="h-4 w-4 mr-2" />
            Refresh
          </Button>
        </div>
      </div>

      {/* Metrics Cards */}
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.1 }}
        >
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Total Vulnerabilities</CardTitle>
              <Shield className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{metrics?.totalVulnerabilities || 0}</div>
              <p className="text-xs text-muted-foreground">
                {metrics?.openVulnerabilities || 0} open
              </p>
            </CardContent>
          </Card>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.2 }}
        >
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Critical Issues</CardTitle>
              <XCircle className="h-4 w-4 text-red-500" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-red-600">{metrics?.criticalVulnerabilities || 0}</div>
              <p className="text-xs text-muted-foreground">
                Immediate attention required
              </p>
            </CardContent>
          </Card>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.3 }}
        >
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Security Score</CardTitle>
              <CheckCircle className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{metrics?.securityScore || 0}/100</div>
              <Progress value={metrics?.securityScore || 0} className="mt-2" />
            </CardContent>
          </Card>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.4 }}
        >
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Secrets</CardTitle>
              <Key className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{secrets.length}</div>
              <p className="text-xs text-muted-foreground">
                {secrets.filter(s => s.isActive).length} active
              </p>
            </CardContent>
          </Card>
        </motion.div>
      </div>

      {/* Main Content */}
      <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-4">
        <TabsList>
          <TabsTrigger value="vulnerabilities">Vulnerabilities</TabsTrigger>
          <TabsTrigger value="scans">Security Scans</TabsTrigger>
          <TabsTrigger value="secrets">Secrets Management</TabsTrigger>
          <TabsTrigger value="metrics">Security Metrics</TabsTrigger>
        </TabsList>

        <TabsContent value="vulnerabilities" className="space-y-4">
          {/* Filters */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <Filter className="h-5 w-5 mr-2" />
                Vulnerability Filters
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="flex items-center space-x-4">
                <div className="flex items-center space-x-2">
                  <Label htmlFor="severity-filter">Severity</Label>
                  <Select value={filterSeverity} onValueChange={setFilterSeverity}>
                    <SelectTrigger className="w-32">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">All</SelectItem>
                      <SelectItem value="critical">Critical</SelectItem>
                      <SelectItem value="high">High</SelectItem>
                      <SelectItem value="medium">Medium</SelectItem>
                      <SelectItem value="low">Low</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="flex items-center space-x-2">
                  <Label htmlFor="status-filter">Status</Label>
                  <Select value={filterStatus} onValueChange={setFilterStatus}>
                    <SelectTrigger className="w-32">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">All</SelectItem>
                      <SelectItem value="open">Open</SelectItem>
                      <SelectItem value="in_progress">In Progress</SelectItem>
                      <SelectItem value="resolved">Resolved</SelectItem>
                      <SelectItem value="false_positive">False Positive</SelectItem>
                      <SelectItem value="accepted_risk">Accepted Risk</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Vulnerabilities List */}
          <Card>
            <CardHeader>
              <CardTitle>Vulnerabilities</CardTitle>
              <CardDescription>
                {filteredVulnerabilities.length} vulnerabilities found
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {filteredVulnerabilities.map((vuln, index) => (
                  <motion.div
                    key={vuln.id}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ delay: index * 0.05 }}
                    className="flex items-center justify-between p-4 border rounded-lg hover:bg-muted/50 transition-colors"
                  >
                    <div className="flex items-center space-x-4">
                      {getSeverityIcon(vuln.severity)}
                      <div>
                        <p className="font-medium">{vuln.title}</p>
                        <p className="text-sm text-muted-foreground">
                          {vuln.description}
                        </p>
                        <div className="flex items-center space-x-4 mt-1">
                          <span className="text-xs text-muted-foreground">
                            {vuln.category}
                          </span>
                          {vuln.cve && (
                            <span className="text-xs text-muted-foreground">
                              CVE: {vuln.cve}
                            </span>
                          )}
                          {vuln.filePath && (
                            <span className="text-xs text-muted-foreground">
                              {vuln.filePath}:{vuln.lineNumber}
                            </span>
                          )}
                        </div>
                      </div>
                    </div>
                    <div className="flex items-center space-x-2">
                      <Badge variant={getSeverityColor(vuln.severity)}>
                        {vuln.severity}
                      </Badge>
                      <Badge variant={getStatusColor(vuln.status)}>
                        {vuln.status}
                      </Badge>
                    </div>
                  </motion.div>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="scans" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Security Scans</CardTitle>
              <CardDescription>
                Recent security scans and their results
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {scans.map((scan, index) => (
                  <motion.div
                    key={scan.id}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ delay: index * 0.1 }}
                    className="flex items-center justify-between p-4 border rounded-lg hover:bg-muted/50 transition-colors cursor-pointer"
                    onClick={() => loadVulnerabilities()}
                  >
                    <div className="flex items-center space-x-4">
                      <div className="flex items-center space-x-2">
                        {scan.status === 'completed' ? (
                          <CheckCircle className="h-5 w-5 text-green-500" />
                        ) : scan.status === 'failed' ? (
                          <XCircle className="h-5 w-5 text-red-500" />
                        ) : scan.status === 'running' ? (
                          <Clock className="h-5 w-5 text-blue-500" />
                        ) : (
                          <Clock className="h-5 w-5 text-gray-400" />
                        )}
                        <div>
                          <p className="font-medium capitalize">{scan.scanType} Scan</p>
                          <p className="text-sm text-muted-foreground">
                            {scan.totalVulnerabilities} vulnerabilities found
                          </p>
                        </div>
                      </div>
                    </div>
                    <div className="flex items-center space-x-4">
                      <div className="text-right">
                        <p className="text-sm font-medium">
                          {scan.criticalVulnerabilities} critical, {scan.highVulnerabilities} high
                        </p>
                        <p className="text-xs text-muted-foreground">
                          {new Date(scan.startedAt).toLocaleString()}
                        </p>
                      </div>
                      <Badge variant={
                        scan.status === 'completed' ? 'default' :
                        scan.status === 'failed' ? 'destructive' :
                        scan.status === 'running' ? 'secondary' : 'outline'
                      }>
                        {scan.status}
                      </Badge>
                    </div>
                  </motion.div>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="secrets" className="space-y-4">
          <Card>
            <CardHeader>
              <div className="flex items-center justify-between">
                <div>
                  <CardTitle>Secrets Management</CardTitle>
                  <CardDescription>
                    Manage encrypted secrets and credentials
                  </CardDescription>
                </div>
                <Button size="sm">
                  <Plus className="h-4 w-4 mr-2" />
                  Add Secret
                </Button>
              </div>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {secrets.map((secret, index) => (
                  <motion.div
                    key={secret.id}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ delay: index * 0.05 }}
                    className="flex items-center justify-between p-4 border rounded-lg"
                  >
                    <div className="flex items-center space-x-4">
                      <Key className="h-5 w-5 text-muted-foreground" />
                      <div>
                        <p className="font-medium">{secret.name}</p>
                        <p className="text-sm text-muted-foreground">
                          {secret.description}
                        </p>
                        <div className="flex items-center space-x-4 mt-1">
                          <Badge variant="outline">{secret.type}</Badge>
                          <Badge variant="outline">{secret.environment}</Badge>
                          {secret.tags.map(tag => (
                            <Badge key={tag} variant="secondary">{tag}</Badge>
                          ))}
                        </div>
                      </div>
                    </div>
                    <div className="flex items-center space-x-2">
                      <Badge variant={secret.isActive ? 'default' : 'secondary'}>
                        {secret.isActive ? 'Active' : 'Inactive'}
                      </Badge>
                      <Button size="sm" variant="outline">
                        <RotateCcw className="h-4 w-4" />
                      </Button>
                      <Button size="sm" variant="outline">
                        <Settings className="h-4 w-4" />
                      </Button>
                    </div>
                  </motion.div>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="metrics" className="space-y-4">
          <div className="grid gap-4 md:grid-cols-2">
            <Card>
              <CardHeader>
                <CardTitle>Vulnerability Breakdown</CardTitle>
                <CardDescription>
                  Distribution of vulnerabilities by severity
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <div className="flex justify-between text-sm mb-1">
                    <span>Critical</span>
                    <span>{metrics?.criticalVulnerabilities || 0}</span>
                  </div>
                  <Progress 
                    value={metrics ? (metrics.criticalVulnerabilities / metrics.totalVulnerabilities) * 100 : 0} 
                    className="h-2" 
                  />
                </div>
                <div>
                  <div className="flex justify-between text-sm mb-1">
                    <span>High</span>
                    <span>{metrics?.highVulnerabilities || 0}</span>
                  </div>
                  <Progress 
                    value={metrics ? (metrics.highVulnerabilities / metrics.totalVulnerabilities) * 100 : 0} 
                    className="h-2" 
                  />
                </div>
                <div>
                  <div className="flex justify-between text-sm mb-1">
                    <span>Medium</span>
                    <span>{metrics?.mediumVulnerabilities || 0}</span>
                  </div>
                  <Progress 
                    value={metrics ? (metrics.mediumVulnerabilities / metrics.totalVulnerabilities) * 100 : 0} 
                    className="h-2" 
                  />
                </div>
                <div>
                  <div className="flex justify-between text-sm mb-1">
                    <span>Low</span>
                    <span>{metrics?.lowVulnerabilities || 0}</span>
                  </div>
                  <Progress 
                    value={metrics ? (metrics.lowVulnerabilities / metrics.totalVulnerabilities) * 100 : 0} 
                    className="h-2" 
                  />
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Top Vulnerability Types</CardTitle>
                <CardDescription>
                  Most common vulnerability categories
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  {metrics?.topVulnerabilityTypes.map((type) => (
                    <div key={type.type} className="flex items-center justify-between">
                      <span className="text-sm capitalize">{type.type}</span>
                      <Badge variant="outline">{type.count}</Badge>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>
      </Tabs>
    </div>
  );
};